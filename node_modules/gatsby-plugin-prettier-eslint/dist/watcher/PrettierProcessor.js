"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _fastGlob = _interopRequireDefault(require("fast-glob"));

var _picomatch = _interopRequireDefault(require("picomatch"));

var _prettier = _interopRequireDefault(require("prettier"));

class PrettierProcessor {
  constructor({
    cwd = process.cwd(),
    patterns = [],
    ignorePatterns = [],
    customOptions = {}
  } = {}) {
    this.cwd = cwd;
    this.patterns = patterns;
    this.ignorePatterns = ignorePatterns;
    this.customOptions = customOptions;
    this.isMatch = (0, _picomatch.default)(this.patterns, {
      ignore: this.ignorePatterns
    });
  }

  _format(filePath) {
    const absoluteFilePath = _path.default.join(this.cwd, filePath);

    const configFilePath = _prettier.default.resolveConfigFile.sync(absoluteFilePath);

    const fileOptions = _prettier.default.resolveConfig.sync(configFilePath);

    const options = { ...fileOptions,
      ...this.customOptions,
      filepath: filePath
    };

    const originalText = _fs.default.readFileSync(absoluteFilePath, {
      encoding: "utf8"
    });

    const formattedText = _prettier.default.format(originalText, options);

    if (originalText === formattedText) return false;

    _fs.default.writeFileSync(absoluteFilePath, formattedText, {
      encoding: "utf8"
    });

    console.info(`formatted file at ${absoluteFilePath}`);
    return true;
  }

  process() {
    let hasFilesChanged = false;

    try {
      _fastGlob.default.sync(this.patterns, {
        cwd: this.cwd,
        ignore: this.ignorePatterns,
        dot: true
      }).forEach(entry => {
        const changed = this._format(entry);

        if (changed) hasFilesChanged = true;
      });
    } catch (err) {
      console.error(err);
    }

    return hasFilesChanged;
  }

  processFile(filePath) {
    if (!this.isMatch(filePath)) return false;
    return this._format(filePath);
  }

}

exports.default = PrettierProcessor;